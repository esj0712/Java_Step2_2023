package chapter23.socket03;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;

public class ChatClient extends JFrame implements Runnable {

   JTextArea area;// 메시지를 화면에 출력하는 공간
   JTextField input;
   JButton send_bt;// 메시지 전송버튼
   JPanel south_p;

   // 서버 접속을 위한 객체
   Socket s;
   BufferedReader in;
   PrintWriter out;
   Thread t;

   public ChatClient() {
      area = new JTextArea();
      this.add(area);

      // BorderLayout배치관리자로 지전된 JPanel 생성
      south_p = new JPanel(new BorderLayout());
      south_p.add(input = new JTextField());// 패널객체의 가운데 추가
      south_p.add(send_bt = new JButton("보내기"), BorderLayout.EAST);
      this.add(south_p, BorderLayout.SOUTH);
      
      // 이벤트 감지자 등록
      this.addWindowListener(new WindowAdapter() {
         
         @Override
         public void windowClosing(WindowEvent e) {
            // 종료하기 전에 서버 접속 해제
            // 종료 메세지를 보낸다.(서버의 스레드를 소멸시키기 위            함이다.)
            out.println("~X");//종료시 xx:~X라는 메시지 전달
            // 위의 메세지가 서버로 갔다가 다시
            // 스레드 쪽으로 돌아온다.
         }
      });
      
      // 버튼
      send_bt.addActionListener(new ActionListener() {

         @Override
         public void actionPerformed(ActionEvent arg0) {
            sendData();//서버로 메시지를 전달하기 위한 메서드         
         }
      });

      setBounds(100, 100, 400, 500);
      setVisible(true);

      connected(); // 서버 접속

      //서버로부터 전달되는 메세지를 감지하여 받는 스레드 생성
      t = new Thread(this);
      t.start(); //Runnable의 run()이 실행됨
      
   }
   
   
   private void connected() {
      try {
         // 서버 접속
         s = new Socket("172.16.10.12", 3200);
         in = new BufferedReader(new InputStreamReader(s.getInputStream()));
         out = new PrintWriter(s.getOutputStream(), true);
      } catch (Exception e) {
         e.printStackTrace();
      }
   }

   public static void main(String[] args) {

      new ChatClient();

   }

   @Override
   public void run() {
      // 서버로부터 전달되는 메세지를 기다렸다가 도착하면 화면에 출력
      while (true) {
         try {
            String msg = in.readLine();
            if (msg.equals("~X")) { // 나가기
               break;
            }

            if (msg != null) { // 채팅 중
               area.append(msg + "\r\n"); // "\r\n" : 다음 라인으로 넘어가기
            }

         } catch (Exception e) {

            e.printStackTrace();

         }
      }

      closed(); // 열려있는 스트림을 닫는 메서드
      System.exit(0); // 프로그램 종료

   }// run

   private void sendData() {
      String msg = input.getText().trim(); // trim() : 양쪽 끝의 필요없는 공백을 제거해줌
      if (msg.length() > 0) {
         // 한글자라도 입력했을 때 서버로 보내기
         out.println(msg);
      }
      input.setText("");// 청소!!
   }

   private void closed() {
      try {
         if (out != null)
            out.close();
         if (in != null)
            in.close();
         if (s != null)
            s.close();
      } catch (Exception e) {
         // TODO: handle exception
      }
   }

}